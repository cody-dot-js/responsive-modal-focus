{"version":3,"sources":["Modal.js","Content.js","App.js","index.js"],"names":["Modal","activeBreakpoint","React","useContext","ActiveBreakpointContext","disclosureManager","DisclosureManagerContext","titleRef","useRef","useEffect","current","focus","onClose","useCallback","dismiss","desktopContent","tabIndex","ref","text","mobileContent","content","useMemo","title","Content","openModal","disclose","preferredType","size","key","component","onClick","App","locale","ReactDOM","render","document","getElementById"],"mappings":"+QAUe,SAASA,IACtB,IAAMC,EAAmBC,IAAMC,WAAWC,2BACpCC,EAAoBH,IAAMC,WAAWG,4BACrCC,EAAWL,IAAMM,OAAO,MAK9BN,IAAMO,WAAU,WACaF,EAAnBG,QACFC,UACL,IAKH,IAAMC,EAAUV,IAAMW,aAAY,WAChCR,EAAkBS,YACjB,CAACT,IAEEU,EACJ,6BACE,0BAAMC,SAAS,IAAIC,IAAKV,GAAxB,sBAGA,mDACA,kBAAC,IAAD,CAAQW,KAAK,sBAIXC,EACJ,6BACE,0BAAMH,SAAS,IAAIC,IAAKV,GAAxB,qBAGA,kDACA,kBAAC,IAAD,CAAQW,KAAK,sBAQXE,EAAUlB,IAAMmB,SAAQ,WAC5B,OAAQpB,GACN,IAAK,QACL,IAAK,OACL,IAAK,WACH,OAAOc,EACT,QACE,OAAOI,KAEV,CAAClB,EAAkBc,EAAgBI,IAEtC,OACE,6BACE,kBAAC,IAAD,CAAcG,MAAM,sBAAsBV,QAASA,IAClDQ,GC5DQ,SAASG,IACtB,IAAMlB,EAAoBH,IAAMC,WAAWG,4BAErCkB,EAAYtB,IAAMW,aAAY,WAClCR,EAAkBoB,SAAS,CACzBC,cAAe,QACfC,KAAM,QACNP,QAAS,CACPQ,IAAK,kBACLC,UAAW,kBAAC7B,EAAD,WAGd,CAACK,IAEJ,OAAO,kBAAC,IAAD,CAAQa,KAAK,aAAaY,QAASN,ICE7BO,MAZf,WACE,OACE,kBAAC,IAAD,CAAMC,OAAO,MACX,kBAAC,2BAAD,KACE,kBAAC,IAAD,KACE,kBAACT,EAAD,UCZVU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.487986ac.chunk.js","sourcesContent":["import React from \"react\";\nimport { ActiveBreakpointContext } from \"terra-breakpoints\";\nimport { DisclosureManagerContext } from \"terra-disclosure-manager\";\nimport Button from \"terra-button\";\nimport ActionHeader from \"terra-action-header\";\n\n/**\n * Use the activeBreakpoint to determine which content (mobile vs desktop) to\n * render.\n */\nexport default function Modal() {\n  const activeBreakpoint = React.useContext(ActiveBreakpointContext);\n  const disclosureManager = React.useContext(DisclosureManagerContext);\n  const titleRef = React.useRef(null);\n\n  /**\n   * On mount, focus on the title\n   */\n  React.useEffect(() => {\n    const { current: title } = titleRef;\n    title.focus();\n  }, []);\n\n  /**\n   * Dismiss the modal when clicking on the ActionHeader close button\n   */\n  const onClose = React.useCallback(() => {\n    disclosureManager.dismiss();\n  }, [disclosureManager]);\n\n  const desktopContent = (\n    <div>\n      <span tabIndex=\"0\" ref={titleRef}>\n        Desktop Title Here\n      </span>\n      <p>Desktop Content Here</p>\n      <Button text=\"Focusable Button\" />\n    </div>\n  );\n\n  const mobileContent = (\n    <div>\n      <span tabIndex=\"0\" ref={titleRef}>\n        Mobile Title Here\n      </span>\n      <p>Mobile Content Here</p>\n      <Button text=\"Focusable Button\" />\n    </div>\n  );\n\n  /**\n   * Computed, memoized value using the activeBreakpoint to determine which\n   * breakpoint content to render\n   */\n  const content = React.useMemo(() => {\n    switch (activeBreakpoint) {\n      case \"large\":\n      case \"huge\":\n      case \"enormous\":\n        return desktopContent;\n      default:\n        return mobileContent;\n    }\n  }, [activeBreakpoint, desktopContent, mobileContent]);\n\n  return (\n    <div>\n      <ActionHeader title=\"Action Header Title\" onClose={onClose} />\n      {content}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Button from \"terra-button\";\nimport { DisclosureManagerContext } from \"terra-disclosure-manager\";\nimport Modal from \"./Modal\";\n\n/**\n * Just render a button that delegates to the diclosureManager to open our modal\n */\nexport default function Content() {\n  const disclosureManager = React.useContext(DisclosureManagerContext);\n\n  const openModal = React.useCallback(() => {\n    disclosureManager.disclose({\n      preferredType: \"modal\",\n      size: \"large\",\n      content: {\n        key: \"modal-component\",\n        component: <Modal />\n      }\n    });\n  }, [disclosureManager]);\n\n  return <Button text=\"Open modal\" onClick={openModal} />;\n}\n","import React from \"react\";\nimport Base from \"terra-base\";\nimport { ActiveBreakpointProvider } from \"terra-breakpoints\";\nimport ModalManager from \"terra-modal-manager\";\nimport Content from \"./Content\";\n\n/**\n * - Base: required by all terra apps\n * - ActiveBreakpointProvider: used to determine the active breakpoint\n *    needs to be above the ModalManager to get the context in the modals\n * - ModalManager: used to setup modal environment\n */\nfunction App() {\n  return (\n    <Base locale=\"en\">\n      <ActiveBreakpointProvider>\n        <ModalManager>\n          <Content />\n        </ModalManager>\n      </ActiveBreakpointProvider>\n    </Base>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}